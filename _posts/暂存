#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<cmath>
#include<queue>
using namespace std;
const int M = 200005 ;
struct Trie{
	int  son[26];
	int fail;
	int End;
}t[M<<1];
int  st[M],top;
char s[M],w[M];
char ch[M];
int n,cnt;
inline void insert(char *s){
	int len=strlen(s),now=0;
    for(int i=0;i<len;i++){
    	int v=s[i]-'a';
    	if(!t[now].son[v]){
    		t[now].son[v]=++cnt;
    		ch[now]=s[i];
		}
		now=t[now].son[v];
	}
	t[now].End=len;
}
inline void Get_Fail(){
	queue<int>q;
	for(int i=0;i<=25;i++)
	  if(t[0].son[i])
	    q.push(t[0].son[i]);
	while(!q.empty()){
		int u=q.front(); q.pop();
		for(int i=0;i<=25;i++)
		  if(t[u].son[i]){
		  	t[t[u].son[i]].fail=t[t[u].fail].son[i];
		  	q.push(t[u].son[i]);
		  }
		  else t[u].son[i]=t[t[u].fail].son[i];
	}
}
inline void Solve(char *s){
	int len=strlen(s);
	for(int i=0;i<len;i++){
		int v=s[i]-'a';
		if(!top){
			if(t[0].son[v]) st[++top]=t[0].son[v];
			else printf("%c",s[i]);
		}
		else{
			int temp=t[st[top]].son[v];
			if(t[st[top]].son[v])
			  st[++top]=temp;
			else{
				for(int j=1;j<=top;j++)
				  printf("%c",ch[st[j]]);
				top=0;
				printf("%c",s[i]);
			}
		}
		if(t[st[top]].End) top-=t[st[top]].End;
	}
	for(int i=1;i<=top;i++)
	  printf("%c",ch[st[i]]);
}
int main(){
	scanf("%s%d",s,&n);
	for(int i=1;i<=n;i++){
		scanf("%s",w);
		insert(w);
	}
//	Get_Fail();
	Solve(s);
	return 0;
}
